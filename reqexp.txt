regular expressions

[] - matches any character inside(åäèí ñëåä äðóã ñå ñëàãàò, áåç èíòåðâàëè)
[^] - matches any character, that is not inside
[0-9]- matches range
[^0-9]-обратното
\w = [a-zA-Z0-9_]
\W = [^a-zA-Z0-9_]
\d = [0-9]
\D= [^0-9]
\s – Matches any white-space character
\S – Matches any non-white-space character (opposite of \s)
* - Matches the previous element zero or more times \+\d*
+ - Matches the previous element one or more times \+\d+
? - Matches the previous element zero or one time \+\d?
escapes Name:\t\w+\nPhone:\s*\+\d+
\t - tab  
\n - new line
{num}
{min,}
{min,max}
| - or
^ - The match must start at the beginning of the string or line anchors
$ - The match must occur at the end of the string or before \n anchors
ex. ^\w{6,12}$ - maches dumi ot 6 do 12 simwola
\b boundary of word
(subexpression) - captures the matched subexpression and assigns it a number \d{2}-(\w{3})-\d{4} 
(?<name>subexpression) - Captures the matched subexpression into a named group  \d{2}-(?<month>\w{3})-\d{4}
(?:subexpression) – Defines a non-capturing group ^(?:Hi|hello),\s*(\w+)$
\number – matches the value of a numbered subexpression \d{2}(-|\/)\d{2}\1\d{4}
\k<name> – matches the value of a named expression \d{2}(?<del>-|\/)\d{2}\k<del>\d{4}

5.Задача от упражненията
Match ALL of these
Ivan Ivanov
Match NONE of these
ivan ivanov, Ivan ivanov, ivan Ivanov, IVan Ivanov, Ivan IvAnov, Ivan	Ivanov
\b[A-Z][a-z]+ [A-Z][a-z]+\b

6.Задача от упражненията
Match ALL of these
+359 2 222 2222
+359-2-222-2222
Match NONE of these
359-2-222-2222, +359/2/222/2222, +359-2 222 2222
+359 2-222-2222, +359-2-222-222, +359-2-222-22222
1.вариант - \+\d{3}( |-)\d\1\d{3}\1\d{4}\b
2.вариант - \+\d{3}( \d \d{3} |-\d-\d{3}-)\d{4}\b

Regular expressions from WIKIPEDIA
. Matches any single character (many applications exclude newlines, and exactly which characters are considered newlines is flavor-,
character-encoding-, and platform-specific, but it is safe to assume that the line feed character is included). Within POSIX bracket
expressions, the dot character matches a literal dot. For example, a.c matches "abc", etc., but [a.c] matches only "a", ".", or "c".
[ ] A bracket expression. Matches a single character that is contained within the brackets. For example, [abc] matches "a", "b", or
"c". [a-z] specifies a range which matches any lowercase letter from "a" to "z". These forms can be mixed: [abcx-z] matches "a", "b",
"c", "x", "y", or "z", as does [a-cx-z].
The - character is treated as a literal character if it is the last or the first (after the ^, if present) character within the
brackets: [abc-], [-abc]. Note that backslash escapes are not allowed. The ] character can be included in a bracket expression if it is
the first (after the ^) character: []abc].
[^ ] Matches a single character that is not contained within the brackets. For example, [^abc] matches any character other than "a",
"b", or "c". [^a-z]matches any single character that is not a lowercase letter from "a" to "z". Likewise, literal characters and ranges
can be mixed.
^ Matches the starting position within the string. In line-based tools, it matches the starting position of any line.
$ Matches the ending position of the string or the position just before a string-ending newline. In line-based tools, it matches the
ending position of any line.
( ) Defines a marked subexpression. The string matched within the parentheses can be recalled later (see the next entry, \n). A marked
subexpression is also called a block or capturing group. BRE mode requires \( \).
\n Matches what the nth marked subexpression matched, where n is a digit from 1 to 9. This construct is vaguely defined in the POSIX.2
standard. Some tools allow referencing more than nine capturing groups.
* Matches the preceding element zero or more times. For example, ab*c matches "ac", "abc", "abbbc", etc. [xyz]* matches "", "x", "y",
"z", "zx", "zyx", "xyzzy", and so on. (ab)* matches "", "ab", "abab", "ababab", and so on.
{m,n} Matches the preceding element at least m and not more than n times. For example, a{3,5} matches only "aaa", "aaaa", and "aaaaa".
This is not found in a few older instances of regexes. BRE mode requires \{m,n\}.
? Matches the preceding element zero or one time. For example, ab?c matches only "ac" or "abc".
+ Matches the preceding element one or more times. For example, ab+c matches "abc", "abbc", "abbbc", and so on, but not "ac".
| The choice (also known as alternation or set union) operator matches either the expression before or the expression after the
operator. For example,abc|def matches "abc" or "def".

examples: 
.at matches any three-character string ending with "at", including "hat", "cat", and "bat".
[hc]at matches "hat" and "cat".
[^b]at matches all strings matched by .at except "bat".
[^hc]at matches all strings matched by .at other than "hat" and "cat".
^[hc]atmatches "hat" and "cat", but only at the beginning of the string or line.
[hc]at$ matches "hat" and "cat", but only at the end of the string or line.
\[.\] matches any single character surrounded by "[" and "]" since the brackets are escaped, for example: "[a]" and "[b]".
\s.* matches s followed by zero or more characters, for example: "s" and "saw" and "seed".
[hc]+at matches "hat", "cat", "hhat", "chat", "hcat", "cchchat", and so on, but not "at".
[hc]?at matches "hat", "cat", and "at".
[hc]*at matches "hat", "cat", "hhat", "chat", "hcat", "cchchat", "at", and so on.
cat|dog matches "cat" or "dog".
